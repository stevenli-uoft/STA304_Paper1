LLM: ChatGPT-4o

Usage 1 - Asking how to simulate data:
User: Show me how to write an R script that simulates a data with columns ID and Date from 2015 to 2023, by day frequency.

LLM: 
# Load necessary libraries
set.seed(123)  # For reproducibility

# Number of rows
num_rows <- 10000

# Generate random ID's between 2015 and 2023 with daily frequency
data <- tibble(
  ID = seq(1, num_rows),
  Date = sample(seq(as.Date('2015-01-01'), 
                    as.Date('2023-12-31'), by="day"), 
                num_rows, replace=TRUE)
)

# View first few rows of the data
head(data)

# If you want to save this data to a CSV file, you can uncomment the following line:
# write.csv(data, "simulated_data.csv", row.names = FALSE)

Usage 2 - Writing tests
User: How do I use the testthat library in R, to write tests in a dataset?

LLM: The testthat library in R is a popular package for unit testing that allows you to write and organize tests for your code, ensuring that functions work as expected. To use testthat with datasets, the idea is to check that certain conditions hold for the data, such as ensuring that data types are correct, certain values are within expected ranges, or specific columns meet predefined conditions.

Example 1: Check that all columns exist in a dataset
test_that("Dataset contains necessary columns", {
  expect_true(all(c("id", "age", "income") %in% colnames(my_data)))
})

Example 2: Check the data type of a specific column
test_that("Age column is numeric", {
  expect_true(is.numeric(my_data$age))
})

Example 3: Test the data for missing values
test_that("No missing values in age column", {
  expect_true(all(!is.na(my_data$age)))
})

Example 4: Check if the column ID contains unique values
test_that("ID column has unique values", {
  expect_equal(length(unique(my_data$id)), nrow(my_data))
})



Usage 3 - Asking how to delete and create directories in R:
User: How do I write an R script that checks if a directory exists, and if it does, deletes that directory and creates a new one?

LLM:
# Define the path to the directory
directory_path <- "path/to/directory"

# Check if the directory exists
if (dir.exists(directory_path)) {
  # Delete the directory and its contents
  unlink(directory_path, recursive = TRUE)
  cat("Directory deleted successfully.\n")
}

# Create a new directory
dir.create(directory_path)
cat("New directory created successfully.\n")


Usage 4 - for downloading data using for loops into nested lists:
User: Write an R script that runs a for loop through a list "datastore_resources" and then runs another inner for loop on the nested list in datastore_resources.

LLM: 
Here’s an R script that runs a for loop through a list datastore_resources, and an inner for loop on the nested list within each element of datastore_resources:

# Example structure of datastore_resources
datastore_resources <- list(
  list("resource1" = c("a", "b", "c")),
  list("resource2" = c("d", "e")),
  list("resource3" = c("f", "g", "h", "i"))
)

# Outer loop: Iterate over datastore_resources
for (resource in datastore_resources) {
  
  # Get the resource name (list element name)
  resource_name <- names(resource)
  cat("Processing", resource_name, ":\n")
  
  # Inner loop: Iterate over the nested list within each resource
  for (item in resource[[1]]) {
    cat("  Item:", item, "\n")
  }
}

User: In the inner for loop, how do I write an if statement to check if the inner list matches a condition?

LLM: To add an if statement in the inner for loop to check if the inner list matches a certain condition, you can simply include the if clause within the loop body. Here's an updated version of the script with an if statement in the inner loop to check for a condition (e.g., whether the item is equal to a certain value or satisfies a particular condition):
# Example structure of datastore_resources
datastore_resources <- list(
  list("resource1" = c("a", "b", "c")),
  list("resource2" = c("d", "e")),
  list("resource3" = c("f", "g", "h", "i"))
)

# Outer loop: Iterate over datastore_resources
for (resource in datastore_resources) {
  
  # Get the resource name (list element name)
  resource_name <- names(resource)
  cat("Processing", resource_name, ":\n")
  
  # Inner loop: Iterate over the nested list within each resource
  for (item in resource[[1]]) {
    
    # If statement to check if the item matches a condition (e.g., equals "b")
    if (item == "b") {
      cat("  Item matches condition (item == 'b'):", item, "\n")
    } else {
      cat("  Item does not match condition:", item, "\n")
    }
  }
}

Usage 5 - Data cleaning, grouping categorical column.
User: For data cleaning in R, how do I write a script that pipes a dataframe, selects columns (OBJECTID, INSTALLED, UPGRADED, INFRA_HIGHORDER), and groups the INFRA_HIGHERORDER string values. 
I want to group INFRA_HIGHERORDER like this:
"Protected Lanes" contains: "Bi-Direction Cycle Track" OR "Cycle Track" OR "Multi-Use Trail" 
"On-Road Lanes" contains "Bike Lane"
"Shared Roadways" contains "Sharrows" OR "Signed Route" OR "Park Road"

LLM: Here’s an R script that pipes a dataframe, selects the required columns (OBJECTID, INSTALLED, UPGRADED, INFRA_HIGHORDER), and then groups the INFRA_HIGHORDER column into specific categories using str_detect():

# Load necessary libraries
library(dplyr)

# Assuming your dataframe is called df
df_cleaned <- df %>%
  # Select the relevant columns
  select(OBJECTID, INSTALLED, UPGRADED, INFRA_HIGHORDER) %>%
  # Use mutate to create a new column with the grouped categories
  mutate(INFRA_HIGHORDER = case_when(
    str_detect(INFRA_HIGHORDER, "Bi-Direction Cycle Track|Cycle Track|Multi-Use Trail") ~ "Protected Lanes",
    str_detect(INFRA_HIGHORDER, "Bike Lane") ~ "On-Road Lanes",
    str_detect(INFRA_HIGHORDER, "Sharrows|Signed Route|Park Road") ~ "Shared Roadways",
    # If none of the above match, filter out other values
    TRUE ~ NA_character_
  ))

# View the cleaned dataframe
print(df_cleaned)


Usage 6 - Reading a folder full of CSV files
User: Write an R script that reads a folder of datasets in CSV format, with varying names. Then write a function that standardizes the column names into trip_id and start_date. Some CSV files trip_id are "trip.id" or "trip_id" or "ï..trip.id", and some files start_date are "start.time" or "trip_start_time". 
After standardizing the column names, combine all CSV files into one.

LLM: You can achieve this task by creating an R script that reads all CSV files from a folder, standardizes the column names, and combines the data into one final dataframe. Below is the R script that implements this:

csv_files <- list.files(path = "data/raw_data/raw_bikeshare_data",
                        pattern = "\\.csv$", full.names = TRUE)

# Function to standardize column names 
standardize_column_names <- function(df) {
  df %>%
    rename_with(~ str_to_lower(.), everything()) %>%
    rename(
      trip_id = matches("trip.id|trip_id|ï..trip.id"),
      start_date = matches("start.time|trip_start_time")
    )
}

# Function to combine data files
process_file <- function(file) {
  data <- read_csv(file, show_col_types = FALSE)
  
  # Ensure trip_id is numeric, then clean the data
  data %>%
    standardize_column_names() %>%
    drop_na(trip_id, start_date)  
}

combined_data <- csv_files %>% map_dfr(process_file)

# Specify the folder path containing the CSV files
folder_path <- "path_to_your_folder"

# Call the function to combine CSV files
combined_data <- process_file(folder_path)

User: In the process_file function, add data cleaning steps such as checking if trip_id is an integer, and coverting the start_date from chr to Date format.

LLM: Sure! I'll modify the script to include data cleaning steps inside the process_file function (formerly named standardize_column_names). In addition to renaming the columns, we'll perform the following data cleaning steps:
Check if trip_id is an integer: We'll ensure the trip_id column is converted to integer. If it contains non-numeric values, those rows will be removed.
Convert start_date from character to Date format: We will handle the conversion from character to Date. If the date cannot be converted, we'll handle it appropriately.

# Load necessary libraries
library(dplyr)
library(lubridate)  # for date conversion

csv_files <- list.files(path = "data/raw_data/raw_bikeshare_data",
                        pattern = "\\.csv$", full.names = TRUE)

# Function to standardize column names 
standardize_column_names <- function(df) {
  df %>%
    rename_with(~ str_to_lower(.), everything()) %>%
    rename(
      trip_id = matches("trip.id|trip_id|ï..trip.id"),
      start_date = matches("start.time|trip_start_time")
    )
}

# Function to clean and convert data types
process_file <- function(file) {
  data <- read_csv(file, show_col_types = FALSE)
  
  # Ensure trip_id is numeric, then clean the data
  data %>%
    standardize_column_names() %>%
    select(trip_id, start_date) %>%
    mutate(
      # Convert trip_id to integer, handling non-integer values gracefully
      trip_id = as.integer(as.numeric(trip_id)),
      
      # Convert start_date from chr to Date, trying different formats
      start_date = parse_date_time(start_date, 
                                   orders = c("mdy HMS", "mdy HM", "mdy",
                                              "m/d/y H:M:S", "m/d/y H:M", 
                                              "m/d/y"))
    ) %>%
    mutate(start_date = floor_date(start_date, unit = "month"))
}

combined_data <- csv_files %>% map_dfr(process_file)

Usage 7 - Table formatting in quarto
User: In R, when presenting a table using Kable, how do I add commas to integers? For example in my code below:
```
bikeShare_sample <- bikeShare_data %>% sample_n(5) %>% 
  as_tibble() %>% arrange(start_date)

colnames(bikeShare_sample) <- c("Year & Month", "Total Monthly Rides")

kable(bikeShare_sample)
```

LLM: To format numbers with commas in the kable table output in R, you can use the format.args argument inside kable. The format.args argument passes additional formatting options to the format function. To add commas to integers, you can set the big.mark parameter to a comma "," within format.args.
library(dplyr)
library(knitr)

# Sample data
bikeShare_sample <- bikeShare_data %>%
  sample_n(5) %>%
  as_tibble() %>%
  arrange(start_date)

# Rename columns
colnames(bikeShare_sample) <- c("Year & Month", "Total Monthly Rides")

# Display table with formatted numbers
kable(bikeShare_sample, format.args = list(big.mark = ",")) 


Usage 8 - creating summary statistics table:
User: I have a dataframe bikeShare_data wth these columns: start_date, total rides, which contains total monthly bike share ridership rides. How do I write an R script that creates a summary statistics table of total annual rides, average monthly rides, and the Year on year growth of total annual rides?
bikeShare_summary <- bikeShare_data %>%
  mutate(year = year(start_date)) %>%  
  group_by(year) %>%   ...

LLM: 
To create a summary statistics table that includes total annual rides, average monthly rides, and year-on-year growth of total annual rides, you can extend your current dplyr pipeline.
library(dplyr)
library(lubridate) # For year function

# Create summary table
bikeShare_summary <- bikeShare_data %>%
  mutate(year = year(start_date)) %>%   # Extract year from start_date
  group_by(year) %>% 
  summarise(
    total_annual_rides = sum(`total rides`),   # Total rides per year
    avg_monthly_rides = mean(`total rides`)    # Average monthly rides per year
  ) %>%
  arrange(year) %>%
  mutate(
    yoy_growth = (total_annual_rides / lag(total_annual_rides) - 1) * 100  # Year-on-year growth percentage
  )

# Print summary table
print(bikeShare_summary)


Usage 9 - creating a combination graph
User: In R, how do I create a combination graph, with the primary y-axis is a line graph, and the seconday y-axis is a bar graph of different scale?

LLM: To create a combination graph in R, where the primary y-axis represents a line graph and the secondary y-axis represents a bar graph with a different scale, you can follow these steps. Here's an example of how you can do it:

# Sample data
x <- 1:10  # Common x-axis data
line_data <- c(1, 4, 6, 8, 10, 12, 15, 20, 18, 25)  # Data for line graph
bar_data <- c(100, 200, 150, 300, 250, 400, 350, 450, 500, 550)  # Data for bar graph

# Create the plot with the line graph on the primary y-axis
plot(x, line_data, type = "l", col = "blue", lwd = 2, ylim = c(0, 30), 
     ylab = "Line Graph Data", xlab = "X Axis", main = "Combination Line and Bar Graph")

# Add a secondary axis using 'par(new = TRUE)'
par(new = TRUE)

# Create the bar plot on the secondary y-axis
barplot(bar_data, names.arg = x, col = "gray", axes = FALSE, ylim = c(0, 600))

# Add the secondary y-axis
axis(side = 4)  # Add y-axis on the right side
mtext("Bar Graph Data", side = 4, line = 3)  # Label for secondary y-axis

# Add a legend to differentiate the graphs
legend("topleft", legend = c("Line Graph", "Bar Graph"), 
       col = c("blue", "gray"), lty = 1, fill = c(NA, "gray"))
Explanation:
Plotting the line graph:
The plot() function is used to create the line graph. The ylim argument sets the y-axis range for the line graph.
Overlaying the bar graph:
The par(new = TRUE) command allows you to overlay the bar graph on top of the line graph without clearing the plot.
The barplot() function is used to create the bar chart. The ylim argument is adjusted to the scale of the bar data.
Secondary y-axis:
The axis(side = 4) function adds the secondary y-axis on the right side of the plot (side = 4).
The mtext() function is used to label the secondary y-axis.
Legend:
The legend() function adds a legend that distinguishes between the line graph and the bar graph.


Usage 10 - creating a cumulative bar graph:
User: I have data that I want to present in a cumualtive bar graph. How do I write that in R? For example, my dataset is bikeways_data with columns (ID, Constructed Year), where constructed year starts in 2001, till 2023. How can I create a cumulative bar graph with this data?

LLM:
To create a cumulative bar graph in R with your bikeways_data dataset, where you have columns ID and Constructed Year, you can follow these steps:
Steps:
Prepare the data: First, you need to count the number of bikeways constructed per year.
Calculate cumulative counts: You will then compute the cumulative number of bikeways constructed over time.
Create the bar plot: Finally, you will plot the cumulative counts as a bar graph.
Here’s how you can do it:

# Assuming your dataset is bikeways_data with columns (ID, Constructed_Year)
# Sample bikeways_data:
# bikeways_data <- data.frame(
#   ID = 1:100,
#   Constructed_Year = sample(2001:2023, 100, replace = TRUE)
# )

# Step 1: Count the number of bikeways constructed per year
library(dplyr)

bikeways_yearly_count <- bikeways_data %>%
  group_by(Constructed_Year) %>%
  summarise(count = n()) %>%
  arrange(Constructed_Year)

# Step 2: Calculate the cumulative sum of bikeways constructed over the years
bikeways_yearly_count$cumulative_count <- cumsum(bikeways_yearly_count$count)

# Step 3: Create a bar plot for cumulative bikeway construction
barplot(bikeways_yearly_count$cumulative_count,
        names.arg = bikeways_yearly_count$Constructed_Year,
        col = "steelblue", 
        ylab = "Cumulative Bikeways Constructed",
        xlab = "Year",
        main = "Cumulative Number of Bikeways Constructed (2001-2023)",
        las = 2)  # las=2 makes the x-axis labels vertical for better readability

User: Write an R script that calculates and visualizes the cumulative counts of different bikeway types over the years, and displays the proportions in a stacked bar plot.

LLM: Below is an R script that calculates and visualizes the cumulative counts of different bikeway types over the years, and displays the proportions in a stacked bar plot:

# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)

# Calculate cumulative counts of bikeway types over the years
cumulative_counts <- bikeway_data %>%
  group_by(Year, Bikeway_Type) %>%
  summarise(Count = n()) %>%
  ungroup() %>%
  group_by(Bikeway_Type) %>%
  arrange(Year) %>%
  mutate(Cumulative_Count = cumsum(Count))

# Fill in missing combinations of Year and Bikeway_Type
cumulative_counts <- complete(cumulative_counts, Year, Bikeway_Type, fill = list(Cumulative_Count = 0))

# Replace missing cumulative counts with previous year's value for each Bikeway_Type
cumulative_counts <- cumulative_counts %>%
  group_by(Bikeway_Type) %>%
  fill(Cumulative_Count, .direction = "down") %>%
  ungroup()

# Create stacked bar plot to visualize the cumulative proportions
ggplot(cumulative_counts, aes(x = Year, y = Cumulative_Count, fill = Bikeway_Type)) +
  geom_bar(stat = "identity") +
  labs(title = "Cumulative Counts of Bikeway Types Over the Years",
       x = "Year",
       y = "Cumulative Count",
       fill = "Bikeway Type") +
  theme_minimal()



















